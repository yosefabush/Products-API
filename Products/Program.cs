using Microsoft.EntityFrameworkCore;
using Serilog;
using Products.Data;
using Products.Repositories;
using Products.Services;
using System.Reflection;
using System.IO;
using Microsoft.OpenApi.Models;
using AspNetCoreRateLimit;

namespace Products
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);
            var path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) ?? throw new Exception("Configure path failed!, Working directory is null!");
            Environment.SetEnvironmentVariable("BASEDIR", path);
            // Configure Serilog
            Log.Logger = new LoggerConfiguration()
                .ReadFrom.Configuration(builder.Configuration)
                .Enrich.FromLogContext()
                .WriteTo.Console()
                .CreateLogger();

            builder.Logging.ClearProviders();
            builder.Host.UseSerilog();
            // Add services to the container.

            // Configure MySQL database
            builder.Services.AddDbContext<ApplicationDbContext>(options =>
                options.UseMySql(
                    builder.Configuration.GetConnectionString("DefaultConnection"),
                    ServerVersion.AutoDetect(builder.Configuration.GetConnectionString("DefaultConnection"))
                )
            );

            builder.Services.AddControllers();
            // Comment out the in-memory database configuration
            // builder.Services.AddDbContext<ApplicationDbContext>(opt => opt.UseInMemoryDatabase("ProductsDb"));

            // Register AutoMapper - Generated by Copilot
            builder.Services.AddAutoMapper(typeof(Program).Assembly);
            builder.Services.AddScoped<IProductRepository, ProductRepository>();
            builder.Services.AddScoped<IProductService, ProductService>();

            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            
            // Enhanced Swagger configuration - Generated by Copilot
            builder.Services.AddSwaggerGen(c => 
            {
                c.SwaggerDoc("v1", new OpenApiInfo 
                { 
                    Title = "Products API", 
                    Version = "v1",
                    Description = "A simple RESTful API for managing products",
                    Contact = new OpenApiContact
                    {
                        Name = "API Support",
                        Email = "support@example.com"
                    },
                    License = new OpenApiLicense
                    {
                        Name = "MIT License",
                        Url = new Uri("https://opensource.org/licenses/MIT")
                    }
                });
                
                // Configure Swagger to use the XML documentation file - Generated by Copilot
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                
                // Only include XML comments if the file exists
                if (File.Exists(xmlPath))
                {
                    c.IncludeXmlComments(xmlPath);
                }
                else
                {
                    Log.Warning("Swagger XML documentation file not found at {XmlPath}", xmlPath);
                }
            });

            // Add rate limiting services
            builder.Services.AddOptions();
            builder.Services.AddMemoryCache();
            builder.Services.Configure<IpRateLimitOptions>(builder.Configuration.GetSection("IpRateLimiting"));
            builder.Services.Configure<IpRateLimitPolicies>(builder.Configuration.GetSection("IpRateLimitPolicies"));
            builder.Services.AddInMemoryRateLimiting();
            builder.Services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI(c =>
                {
                    c.SwaggerEndpoint("/swagger/v1/swagger.json", "Products API v1");
                    c.RoutePrefix = "swagger"; // Set explicitly to "swagger" - Generated by Copilot
                });
            }

            app.UseHttpsRedirection();

            app.UseAuthorization();

            // Use rate limiting middleware
            app.UseIpRateLimiting();

            app.MapControllers();

            app.Run();
        }
    }
}
