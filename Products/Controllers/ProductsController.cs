using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Products.Domain.Entities;
using Products.Models;
using Products.Services;

namespace Products.Controllers
{
    /// <summary>
    /// API controller for managing product resources
    /// </summary>
    /// <remarks>
    /// This controller handles CRUD operations for products
    /// Generated by Copilot
    /// </remarks>
    [ApiController]
    [Route("api/v1/[controller]")]
    public class ProductsController : ControllerBase
    {
        private readonly IProductService _service;
        private readonly ILogger<ProductsController> _logger;
        private readonly IMapper _mapper;

        /// <summary>
        /// Initializes a new instance of the ProductsController
        /// </summary>
        /// <param name="service">Product service for business logic</param>
        /// <param name="logger">Logger for diagnostic information</param>
        /// <param name="mapper">AutoMapper instance for object mapping</param>
        public ProductsController(IProductService service, ILogger<ProductsController> logger, IMapper mapper)
        {
            _service = service;
            _logger = logger;
            _mapper = mapper;
        }

        /// <summary>
        /// Gets all products
        /// </summary>
        /// <returns>A collection of all products</returns>
        /// <response code="200">Returns the list of products</response>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<ProductDto>), StatusCodes.Status200OK)]
        public async Task<ActionResult<IEnumerable<ProductDto>>> GetAll()
        {
            var products = await _service.GetAllAsync();
            return Ok(_mapper.Map<IEnumerable<ProductDto>>(products));
        }

        /// <summary>
        /// Gets a specific product by its ID
        /// </summary>
        /// <param name="id">The ID of the product to retrieve</param>
        /// <returns>The requested product</returns>
        /// <response code="200">Returns the requested product</response>
        /// <response code="404">If the product is not found</response>
        [HttpGet("{id}")]
        [ProducesResponseType(typeof(ProductDto), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<ProductDto>> Get(int id)
        {
            var product = await _service.GetByIdAsync(id);
            if (product == null)
                return NotFound();

            return Ok(_mapper.Map<ProductDto>(product));
        }

        /// <summary>
        /// Searches for products by name
        /// </summary>
        /// <param name="name">The name to search for</param>
        /// <returns>Products matching the search term</returns>
        /// <response code="200">Returns matching products</response>
        /// <response code="400">If the name parameter is empty</response>
        /// <response code="404">If no products match the search term</response>
        [HttpGet("search")]
        [ProducesResponseType(typeof(IEnumerable<ProductDto>), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<IEnumerable<ProductDto>>> GetByName([FromQuery] string name)
        {
            if (string.IsNullOrWhiteSpace(name))
                return BadRequest("Product name is required");
                
            var products = await _service.GetByNameAsync(name);
            
            if (!products.Any())
                return NotFound();
                
            return Ok(_mapper.Map<IEnumerable<ProductDto>>(products));
        }

        /// <summary>
        /// Creates a new product
        /// </summary>
        /// <param name="dto">The product data</param>
        /// <returns>The newly created product</returns>
        /// <response code="201">Returns the newly created product</response>
        /// <response code="400">If the request data is invalid</response>
        [HttpPost]
        [ProducesResponseType(typeof(ProductDto), StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<ActionResult<ProductDto>> Create([FromBody] ProductInsertDto dto)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            // Use AutoMapper to map from dto to entity
            var product = _mapper.Map<Product>(dto);
            var created = await _service.CreateAsync(product);

            _logger.LogInformation("Product {ProductId} created at {Date}", created.Id, created.CreatedAt);

            var createdDto = _mapper.Map<ProductDto>(created);
            return CreatedAtAction(nameof(Get), new { id = created.Id }, createdDto);
        }

        /// <summary>
        /// Updates an existing product
        /// </summary>
        /// <param name="id">The ID of the product to update</param>
        /// <param name="dto">The updated product data</param>
        /// <returns>No content if successful</returns>
        /// <response code="204">If the product was successfully updated</response>
        /// <response code="400">If the request data is invalid</response>
        /// <response code="404">If the product to update is not found</response>
        [HttpPut("{id}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> Update(int id, [FromBody] ProductDto dto)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var product = _mapper.Map<Product>(dto);
            var updated = await _service.UpdateAsync(id, product);
            if (!updated)
                return NotFound();

            _logger.LogInformation("Product {ProductId} updated", id);
            return NoContent();
        }

        /// <summary>
        /// Deletes a product
        /// </summary>
        /// <param name="id">The ID of the product to delete</param>
        /// <returns>No content if successful</returns>
        /// <response code="204">If the product was successfully deleted</response>
        /// <response code="404">If the product to delete is not found</response>
        [HttpDelete("{id}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> Delete(int id)
        {
            var deleted = await _service.DeleteAsync(id);
            if (!deleted)
                return NotFound();

            _logger.LogInformation("Product {ProductId} deleted", id);
            return NoContent();
        }
    }
}
