using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Moq;
using Products.Data;
using Products.Domain.Entities;
using Products.Repositories;
using Products.Services;
using Xunit;

namespace Products.Tests.Services
{
    public class ProductServiceTests
    {
        // Generated by Copilot
        [Fact]
        public async Task GetAllAsync_ReturnsAllProducts()
        {
            // Arrange
            var mockRepo = new Mock<IProductRepository>();
            var products = GetTestProducts();
            mockRepo.Setup(repo => repo.GetAllAsync())
                .ReturnsAsync(products);
            
            var service = new ProductService(mockRepo.Object);

            // Act
            var result = await service.GetAllAsync();

            // Assert
            Assert.Equal(3, result.Count());
            Assert.Equal(products, result);
        }

        [Fact]
        public async Task GetByIdAsync_WithValidId_ReturnsProduct()
        {
            // Arrange
            var mockRepo = new Mock<IProductRepository>();
            var testProduct = new Product { Id = 1, Name = "Test Product", Price = 10.99m };
            mockRepo.Setup(repo => repo.GetByIdAsync(1))
                .ReturnsAsync(testProduct);
            
            var service = new ProductService(mockRepo.Object);

            // Act
            var result = await service.GetByIdAsync(1);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(1, result.Id);
            Assert.Equal("Test Product", result.Name);
        }

        [Fact]
        public async Task GetByIdAsync_WithInvalidId_ReturnsNull()
        {
            // Arrange
            var mockRepo = new Mock<IProductRepository>();
            // Explicitly return null with correct nullable syntax
            // Generated by Copilot
            mockRepo.Setup(repo => repo.GetByIdAsync(999))
                .ReturnsAsync((Product?)null);
            
            var service = new ProductService(mockRepo.Object);

            // Act
            var result = await service.GetByIdAsync(999);

            // Assert
            Assert.Null(result);
        }

        [Fact]
        public async Task CreateAsync_ReturnsCreatedProduct()
        {
            // Arrange
            var mockRepo = new Mock<IProductRepository>();
            var productToCreate = new Product { Name = "New Product", Price = 15.99m };
            var createdProduct = new Product { Id = 1, Name = "New Product", Price = 15.99m };
            
            mockRepo.Setup(repo => repo.AddAsync(It.IsAny<Product>()))
                .ReturnsAsync(createdProduct);
            
            var service = new ProductService(mockRepo.Object);

            // Act
            var result = await service.CreateAsync(productToCreate);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(1, result.Id);
            Assert.Equal("New Product", result.Name);
            Assert.Equal(15.99m, result.Price);
        }

        [Fact]
        public async Task GetByNameAsync_ShouldReturnProducts_WhenProductsWithNameExist()
        {
            // Arrange
            var mockRepo = new Mock<IProductRepository>();
            var name = "Test Product";
            var expectedProducts = new List<Product>
            {
                new Product { Id = 1, Name = name, Price = 10.99m },
                new Product { Id = 2, Name = name, Price = 12.99m }
            };
            mockRepo.Setup(r => r.GetByNameAsync(name))
                .ReturnsAsync(expectedProducts);

            var service = new ProductService(mockRepo.Object);

            // Act
            var result = await service.GetByNameAsync(name);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(2, result.Count());
            Assert.All(result, p => Assert.Equal(name, p.Name));
        }

        private List<Product> GetTestProducts()
        {
            return new List<Product>
            {
                new Product { Id = 1, Name = "Test Product 1", Price = 10.99m },
                new Product { Id = 2, Name = "Test Product 2", Price = 20.99m },
                new Product { Id = 3, Name = "Test Product 3", Price = 30.99m }
            };
        }
    }
}