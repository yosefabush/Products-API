using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Products.Data;
using Products.Domain.Entities;
using Products.Models;
using Xunit;

namespace Products.Tests.Integration
{
    public class ProductsApiIntegrationTests : IClassFixture<WebApplicationFactory<Program>>
    {
        // Generated by Copilot
        private readonly WebApplicationFactory<Program> _factory;
        private readonly HttpClient _client;

        public ProductsApiIntegrationTests(WebApplicationFactory<Program> factory)
        {
            _factory = factory.WithWebHostBuilder(builder =>
            {
                builder.ConfigureServices(services =>
                {
                    // Find the service descriptor for the DbContext
                    var descriptor = services.SingleOrDefault(
                        d => d.ServiceType == typeof(DbContextOptions<ApplicationDbContext>));

                    if (descriptor != null)
                    {
                        services.Remove(descriptor);
                    }

                    // Create a unique database name for each test to avoid conflicts
                    var databaseName = $"InMemoryDbForTesting_{Guid.NewGuid()}";
                    
                    // Add ApplicationDbContext using an in-memory database for testing
                    services.AddDbContext<ApplicationDbContext>(options =>
                    {
                        options.UseInMemoryDatabase(databaseName);
                    });

                    // Ensure AutoMapper is properly configured
                    services.AddAutoMapper(typeof(Program).Assembly);

                    // Build the service provider
                    var serviceProvider = services.BuildServiceProvider();

                    // Create a scope to obtain a reference to the database context
                    using var scope = serviceProvider.CreateScope();
                    var scopedServices = scope.ServiceProvider;
                    var db = scopedServices.GetRequiredService<ApplicationDbContext>();

                    // Ensure the database is created and seed with test data
                    db.Database.EnsureCreated();
                    
                    // Clear the database first to make sure it's empty
                    db.Products.RemoveRange(db.Products);
                    db.SaveChanges();
                    
                    // Add test products
                    db.Products.AddRange(GetTestProducts());
                    db.SaveChanges();
                });
            });

            _client = _factory.CreateClient();
        }

        [Fact]
        public async Task GetAllProducts_ReturnsSuccessStatusCode()
        {
            // Act
            var response = await _client.GetAsync("/api/v1/products");

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Fact]
        public async Task GetAllProducts_ReturnsExpectedProducts()
        {
            // Act
            var products = await _client.GetFromJsonAsync<List<ProductDto>>("/api/v1/products");

            // Assert
            Assert.NotNull(products);
            Assert.Equal(3, products.Count);
            Assert.Equal("Test Product 1", products[0].Name);
        }

        [Fact]
        public async Task GetProductById_WithValidId_ReturnsProduct()
        {
            // Act
            var product = await _client.GetFromJsonAsync<ProductDto>("/api/v1/products/1");

            // Assert
            Assert.NotNull(product);
            Assert.Equal(1, product.Id);
            Assert.Equal("Test Product 1", product.Name);
        }

        [Fact]
        public async Task GetProductById_WithInvalidId_ReturnsNotFound()
        {
            // Act
            var response = await _client.GetAsync("/api/v1/products/999");

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task CreateProduct_AddsNewProduct()
        {
            // Arrange
            var newProduct = new ProductInsertDto
            {
                Name = "Integration Test Product",
                Price = 99.99m
            };

            var content = new StringContent(
                JsonSerializer.Serialize(newProduct),
                Encoding.UTF8,
                "application/json");

            // Act
            var response = await _client.PostAsync("/api/v1/products", content);

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);

            // Use JsonSerializerOptions with proper property name casing
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            // Verify the product was added
            var responseContent = await response.Content.ReadAsStringAsync();
            var createdProduct = JsonSerializer.Deserialize<ProductDto>(responseContent, options);

            Assert.NotNull(createdProduct);
            Assert.Equal("Integration Test Product", createdProduct.Name);
            Assert.Equal(99.99m, createdProduct.Price);

            // Verify we can retrieve it
            var getResponse = await _client.GetAsync($"/api/v1/products/{createdProduct.Id}");
            getResponse.EnsureSuccessStatusCode();
        }

        private List<Product> GetTestProducts()
        {
            return new List<Product>
            {
                new Product { Id = 1, Name = "Test Product 1", Price = 10.99m },
                new Product { Id = 2, Name = "Test Product 2", Price = 20.99m },
                new Product { Id = 3, Name = "Test Product 3", Price = 30.99m }
            };
        }
    }
}