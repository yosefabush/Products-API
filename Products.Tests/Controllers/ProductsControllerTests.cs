using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Moq;
using Products.Controllers;
using Products.Domain.Entities;
using Products.Mappings;
using Products.Models;
using Products.Services;
using Xunit;

namespace Products.Tests.Controllers
{
    public class ProductsControllerTests
    {
        // Generated by Copilot
        private readonly Mock<IProductService> _mockService;
        private readonly Mock<ILogger<ProductsController>> _mockLogger;
        private readonly IMapper _mapper;
        private readonly ProductsController _controller;

        public ProductsControllerTests()
        {
            _mockService = new Mock<IProductService>();
            _mockLogger = new Mock<ILogger<ProductsController>>();
            
            // Configure AutoMapper for tests
            var mapperConfig = new MapperConfiguration(cfg =>
            {
                cfg.AddProfile(new MappingProfile());
            });
            _mapper = mapperConfig.CreateMapper();
            
            _controller = new ProductsController(_mockService.Object, _mockLogger.Object, _mapper);
        }

        [Fact]
        public async Task GetAll_ReturnsOkResult_WithListOfProducts()
        {
            // Arrange
            var testProducts = GetTestProducts();
            _mockService.Setup(service => service.GetAllAsync())
                .ReturnsAsync(testProducts);

            // Act
            var result = await _controller.GetAll();

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result.Result);
            var returnedProducts = Assert.IsAssignableFrom<IEnumerable<ProductDto>>(okResult.Value);
            Assert.Equal(3, returnedProducts.Count());
        }

        [Fact]
        public async Task Get_WithValidId_ReturnsOkResult_WithProduct()
        {
            // Arrange
            var testId = 1;
            var testProduct = new Product { Id = testId, Name = "Test Product", Price = 10.99m };
            _mockService.Setup(service => service.GetByIdAsync(testId))
                .ReturnsAsync(testProduct);

            // Act
            var result = await _controller.Get(testId);

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result.Result);
            var returnedProduct = Assert.IsType<ProductDto>(okResult.Value);
            Assert.Equal(testId, returnedProduct.Id);
            Assert.Equal("Test Product", returnedProduct.Name);
        }

        [Fact]
        public async Task Get_WithInvalidId_ReturnsNotFound()
        {
            // Arrange
            var testId = 999;
            // Explicitly return null instead of using (Product)null cast to fix nullable warning
            // Generated by Copilot
            _mockService.Setup(service => service.GetByIdAsync(testId))
                .ReturnsAsync((Product?)null);

            // Act
            var result = await _controller.Get(testId);

            // Assert
            Assert.IsType<NotFoundResult>(result.Result);
        }

        [Fact]
        public async Task Create_WithValidProduct_ReturnsCreatedAtAction()
        {
            // Arrange
            var productDto = new ProductInsertDto { Name = "New Product", Price = 15.99m };
            var newProduct = new Product { Id = 1, Name = "New Product", Price = 15.99m };
            
            _mockService.Setup(service => service.CreateAsync(It.IsAny<Product>()))
                .ReturnsAsync(newProduct);

            // Act
            var result = await _controller.Create(productDto);

            // Assert
            var createdAtActionResult = Assert.IsType<CreatedAtActionResult>(result.Result);
            Assert.Equal(nameof(ProductsController.Get), createdAtActionResult.ActionName);
            var returnedProduct = Assert.IsType<ProductDto>(createdAtActionResult.Value);
            Assert.Equal(1, returnedProduct.Id);
            Assert.Equal("New Product", returnedProduct.Name);
        }

        [Fact]
        public async Task GetInventory_WithValidId_ReturnsOkResult_WithInventory()
        {
            // Arrange
            var testId = 1;
            var inventoryDto = new ProductInventoryDto { ProductId = testId, Stock = 42 };
            _mockService.Setup(service => service.GetProductInventoryAsync(testId))
                .ReturnsAsync(inventoryDto);

            // Act
            var result = await _controller.GetInventory(testId);

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result.Result);
            var returnedInventory = Assert.IsType<ProductInventoryDto>(okResult.Value);
            Assert.Equal(testId, returnedInventory.ProductId);
            Assert.Equal(42, returnedInventory.Stock);
        }

        [Fact]
        public async Task GetInventory_WithInvalidId_ReturnsNotFound()
        {
            // Arrange
            var testId = 999;
            _mockService.Setup(service => service.GetProductInventoryAsync(testId))
                .ReturnsAsync((ProductInventoryDto?)null);

            // Act
            var result = await _controller.GetInventory(testId);

            // Assert
            Assert.IsType<NotFoundResult>(result.Result);
        }

        private List<Product> GetTestProducts()
        {
            return new List<Product>
            {
                new Product { Id = 1, Name = "Test Product 1", Price = 10.99m },
                new Product { Id = 2, Name = "Test Product 2", Price = 20.99m },
                new Product { Id = 3, Name = "Test Product 3", Price = 30.99m }
            };
        }
    }
}